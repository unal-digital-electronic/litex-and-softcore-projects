//--------------------------------------------------------------------------------
// Auto-generated by Migen (b1b2b29) & LiteX (75936775) on 2020-05-31 22:13:58
//--------------------------------------------------------------------------------
#include <generated/soc.h>
#ifndef __GENERATED_CSR_H
#define __GENERATED_CSR_H
#include <stdint.h>
#include <system.h>
#ifndef CSR_ACCESSORS_DEFINED
#include <hw/common.h>
#endif /* ! CSR_ACCESSORS_DEFINED */
#ifndef CSR_BASE
#define CSR_BASE 0x82000000L
#endif

/* ctrl */
#define CSR_CTRL_BASE (CSR_BASE + 0x0L)
#define CSR_CTRL_RESET_ADDR (CSR_BASE + 0x0L)
#define CSR_CTRL_RESET_SIZE 1
static inline uint8_t ctrl_reset_read(void) {
	return csr_read_simple(CSR_BASE + 0x0L);
}
static inline void ctrl_reset_write(uint8_t v) {
	csr_write_simple(v, CSR_BASE + 0x0L);
}
#define CSR_CTRL_SCRATCH_ADDR (CSR_BASE + 0x4L)
#define CSR_CTRL_SCRATCH_SIZE 4
static inline uint32_t ctrl_scratch_read(void) {
	uint32_t r = csr_read_simple(CSR_BASE + 0x4L);
	r <<= 8;
	r |= csr_read_simple(CSR_BASE + 0x8L);
	r <<= 8;
	r |= csr_read_simple(CSR_BASE + 0xcL);
	r <<= 8;
	r |= csr_read_simple(CSR_BASE + 0x10L);
	return r;
}
static inline void ctrl_scratch_write(uint32_t v) {
	csr_write_simple(v >> 24, CSR_BASE + 0x4L);
	csr_write_simple(v >> 16, CSR_BASE + 0x8L);
	csr_write_simple(v >> 8, CSR_BASE + 0xcL);
	csr_write_simple(v, CSR_BASE + 0x10L);
}
#define CSR_CTRL_BUS_ERRORS_ADDR (CSR_BASE + 0x14L)
#define CSR_CTRL_BUS_ERRORS_SIZE 4
static inline uint32_t ctrl_bus_errors_read(void) {
	uint32_t r = csr_read_simple(CSR_BASE + 0x14L);
	r <<= 8;
	r |= csr_read_simple(CSR_BASE + 0x18L);
	r <<= 8;
	r |= csr_read_simple(CSR_BASE + 0x1cL);
	r <<= 8;
	r |= csr_read_simple(CSR_BASE + 0x20L);
	return r;
}

/* identifier_mem */
#define CSR_IDENTIFIER_MEM_BASE (CSR_BASE + 0x1000L)

/* uart_phy */
#define CSR_UART_PHY_BASE (CSR_BASE + 0x1800L)
#define CSR_UART_PHY_TUNING_WORD_ADDR (CSR_BASE + 0x1800L)
#define CSR_UART_PHY_TUNING_WORD_SIZE 4
static inline uint32_t uart_phy_tuning_word_read(void) {
	uint32_t r = csr_read_simple(CSR_BASE + 0x1800L);
	r <<= 8;
	r |= csr_read_simple(CSR_BASE + 0x1804L);
	r <<= 8;
	r |= csr_read_simple(CSR_BASE + 0x1808L);
	r <<= 8;
	r |= csr_read_simple(CSR_BASE + 0x180cL);
	return r;
}
static inline void uart_phy_tuning_word_write(uint32_t v) {
	csr_write_simple(v >> 24, CSR_BASE + 0x1800L);
	csr_write_simple(v >> 16, CSR_BASE + 0x1804L);
	csr_write_simple(v >> 8, CSR_BASE + 0x1808L);
	csr_write_simple(v, CSR_BASE + 0x180cL);
}

/* uart */
#define CSR_UART_BASE (CSR_BASE + 0x2000L)
#define CSR_UART_RXTX_ADDR (CSR_BASE + 0x2000L)
#define CSR_UART_RXTX_SIZE 1
static inline uint8_t uart_rxtx_read(void) {
	return csr_read_simple(CSR_BASE + 0x2000L);
}
static inline void uart_rxtx_write(uint8_t v) {
	csr_write_simple(v, CSR_BASE + 0x2000L);
}
#define CSR_UART_TXFULL_ADDR (CSR_BASE + 0x2004L)
#define CSR_UART_TXFULL_SIZE 1
static inline uint8_t uart_txfull_read(void) {
	return csr_read_simple(CSR_BASE + 0x2004L);
}
#define CSR_UART_RXEMPTY_ADDR (CSR_BASE + 0x2008L)
#define CSR_UART_RXEMPTY_SIZE 1
static inline uint8_t uart_rxempty_read(void) {
	return csr_read_simple(CSR_BASE + 0x2008L);
}
#define CSR_UART_EV_STATUS_ADDR (CSR_BASE + 0x200cL)
#define CSR_UART_EV_STATUS_SIZE 1
static inline uint8_t uart_ev_status_read(void) {
	return csr_read_simple(CSR_BASE + 0x200cL);
}
static inline void uart_ev_status_write(uint8_t v) {
	csr_write_simple(v, CSR_BASE + 0x200cL);
}
#define CSR_UART_EV_PENDING_ADDR (CSR_BASE + 0x2010L)
#define CSR_UART_EV_PENDING_SIZE 1
static inline uint8_t uart_ev_pending_read(void) {
	return csr_read_simple(CSR_BASE + 0x2010L);
}
static inline void uart_ev_pending_write(uint8_t v) {
	csr_write_simple(v, CSR_BASE + 0x2010L);
}
#define CSR_UART_EV_ENABLE_ADDR (CSR_BASE + 0x2014L)
#define CSR_UART_EV_ENABLE_SIZE 1
static inline uint8_t uart_ev_enable_read(void) {
	return csr_read_simple(CSR_BASE + 0x2014L);
}
static inline void uart_ev_enable_write(uint8_t v) {
	csr_write_simple(v, CSR_BASE + 0x2014L);
}

/* timer0 */
#define CSR_TIMER0_BASE (CSR_BASE + 0x2800L)
#define CSR_TIMER0_LOAD_ADDR (CSR_BASE + 0x2800L)
#define CSR_TIMER0_LOAD_SIZE 4
static inline uint32_t timer0_load_read(void) {
	uint32_t r = csr_read_simple(CSR_BASE + 0x2800L);
	r <<= 8;
	r |= csr_read_simple(CSR_BASE + 0x2804L);
	r <<= 8;
	r |= csr_read_simple(CSR_BASE + 0x2808L);
	r <<= 8;
	r |= csr_read_simple(CSR_BASE + 0x280cL);
	return r;
}
static inline void timer0_load_write(uint32_t v) {
	csr_write_simple(v >> 24, CSR_BASE + 0x2800L);
	csr_write_simple(v >> 16, CSR_BASE + 0x2804L);
	csr_write_simple(v >> 8, CSR_BASE + 0x2808L);
	csr_write_simple(v, CSR_BASE + 0x280cL);
}
#define CSR_TIMER0_RELOAD_ADDR (CSR_BASE + 0x2810L)
#define CSR_TIMER0_RELOAD_SIZE 4
static inline uint32_t timer0_reload_read(void) {
	uint32_t r = csr_read_simple(CSR_BASE + 0x2810L);
	r <<= 8;
	r |= csr_read_simple(CSR_BASE + 0x2814L);
	r <<= 8;
	r |= csr_read_simple(CSR_BASE + 0x2818L);
	r <<= 8;
	r |= csr_read_simple(CSR_BASE + 0x281cL);
	return r;
}
static inline void timer0_reload_write(uint32_t v) {
	csr_write_simple(v >> 24, CSR_BASE + 0x2810L);
	csr_write_simple(v >> 16, CSR_BASE + 0x2814L);
	csr_write_simple(v >> 8, CSR_BASE + 0x2818L);
	csr_write_simple(v, CSR_BASE + 0x281cL);
}
#define CSR_TIMER0_EN_ADDR (CSR_BASE + 0x2820L)
#define CSR_TIMER0_EN_SIZE 1
static inline uint8_t timer0_en_read(void) {
	return csr_read_simple(CSR_BASE + 0x2820L);
}
static inline void timer0_en_write(uint8_t v) {
	csr_write_simple(v, CSR_BASE + 0x2820L);
}
#define CSR_TIMER0_UPDATE_VALUE_ADDR (CSR_BASE + 0x2824L)
#define CSR_TIMER0_UPDATE_VALUE_SIZE 1
static inline uint8_t timer0_update_value_read(void) {
	return csr_read_simple(CSR_BASE + 0x2824L);
}
static inline void timer0_update_value_write(uint8_t v) {
	csr_write_simple(v, CSR_BASE + 0x2824L);
}
#define CSR_TIMER0_VALUE_ADDR (CSR_BASE + 0x2828L)
#define CSR_TIMER0_VALUE_SIZE 4
static inline uint32_t timer0_value_read(void) {
	uint32_t r = csr_read_simple(CSR_BASE + 0x2828L);
	r <<= 8;
	r |= csr_read_simple(CSR_BASE + 0x282cL);
	r <<= 8;
	r |= csr_read_simple(CSR_BASE + 0x2830L);
	r <<= 8;
	r |= csr_read_simple(CSR_BASE + 0x2834L);
	return r;
}
#define CSR_TIMER0_EV_STATUS_ADDR (CSR_BASE + 0x2838L)
#define CSR_TIMER0_EV_STATUS_SIZE 1
static inline uint8_t timer0_ev_status_read(void) {
	return csr_read_simple(CSR_BASE + 0x2838L);
}
static inline void timer0_ev_status_write(uint8_t v) {
	csr_write_simple(v, CSR_BASE + 0x2838L);
}
#define CSR_TIMER0_EV_PENDING_ADDR (CSR_BASE + 0x283cL)
#define CSR_TIMER0_EV_PENDING_SIZE 1
static inline uint8_t timer0_ev_pending_read(void) {
	return csr_read_simple(CSR_BASE + 0x283cL);
}
static inline void timer0_ev_pending_write(uint8_t v) {
	csr_write_simple(v, CSR_BASE + 0x283cL);
}
#define CSR_TIMER0_EV_ENABLE_ADDR (CSR_BASE + 0x2840L)
#define CSR_TIMER0_EV_ENABLE_SIZE 1
static inline uint8_t timer0_ev_enable_read(void) {
	return csr_read_simple(CSR_BASE + 0x2840L);
}
static inline void timer0_ev_enable_write(uint8_t v) {
	csr_write_simple(v, CSR_BASE + 0x2840L);
}

/* leds */
#define CSR_LEDS_BASE (CSR_BASE + 0x3000L)
#define CSR_LEDS_OUT_ADDR (CSR_BASE + 0x3000L)
#define CSR_LEDS_OUT_SIZE 1
static inline uint8_t leds_out_read(void) {
	return csr_read_simple(CSR_BASE + 0x3000L);
}
static inline void leds_out_write(uint8_t v) {
	csr_write_simple(v, CSR_BASE + 0x3000L);
}

#endif
